import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { InstallationResult, FaultResult } from '../../../shared/schema';

export async function generateInstallationPDF(
  result: InstallationResult,
  imageUrl: string,
  analysisCanvasRef: React.RefObject<HTMLCanvasElement>
): Promise<void> {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Header
  pdf.setFontSize(24);
  pdf.setTextColor(0, 102, 204);
  pdf.text('SolarScope AI - Installation Analysis Report', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Date
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Analysis Summary
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Installation Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  const summaryItems = [
    `Recommended Panels: ${result.recommendedPanels}`,
    `Total Area: ${result.totalArea.toFixed(1)} sq ft`,
    `Usable Area: ${result.usableArea.toFixed(1)} sq ft`,
    `Coverage: ${result.coverage.toFixed(1)}%`,
    `Annual Energy: ${result.estimatedAnnualEnergy.toFixed(0)} kWh`,
    `Annual Savings: $${result.estimatedSavings.toFixed(0)}`,
    `Confidence Score: ${result.confidence.toFixed(1)}%`
  ];

  summaryItems.forEach(item => {
    pdf.text(item, 25, yPosition);
    yPosition += 7;
  });

  yPosition += 10;

  // Original Image
  if (imageUrl) {
    try {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      await new Promise((resolve, reject) => {
        img.onload = resolve;
        img.onerror = reject;
        img.src = imageUrl;
      });

      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx?.drawImage(img, 0, 0);

      const imgData = canvas.toDataURL('image/jpeg', 0.8);
      const imgWidth = 80;
      const imgHeight = (img.height / img.width) * imgWidth;

      if (yPosition + imgHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.text('Original Rooftop Image', 20, yPosition);
      yPosition += 10;
      pdf.addImage(imgData, 'JPEG', 20, yPosition, imgWidth, imgHeight);
      yPosition += imgHeight + 15;
    } catch (error) {
      console.error('Error adding original image to PDF:', error);
    }
  }

  // Analysis Overlay
  if (analysisCanvasRef.current) {
    try {
      const overlayCanvas = await html2canvas(analysisCanvasRef.current);
      const overlayData = overlayCanvas.toDataURL('image/png');
      const overlayWidth = 80;
      const overlayHeight = (overlayCanvas.height / overlayCanvas.width) * overlayWidth;

      if (yPosition + overlayHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.text('Panel Layout Analysis', 20, yPosition);
      yPosition += 10;
      pdf.addImage(overlayData, 'PNG', 20, yPosition, overlayWidth, overlayHeight);
      yPosition += overlayHeight + 15;
    } catch (error) {
      console.error('Error adding analysis overlay to PDF:', error);
    }
  }

  // Recommendations
  if (result.recommendations && result.recommendations.length > 0) {
    if (yPosition > pageHeight - 60) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(16);
    pdf.text('Recommendations', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    result.recommendations.forEach((rec, index) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      
      const lines = pdf.splitTextToSize(`${index + 1}. ${rec}`, pageWidth - 40);
      pdf.text(lines, 25, yPosition);
      yPosition += lines.length * 7 + 5;
    });
  }

  // Technical Details
  if (yPosition > pageHeight - 80) {
    pdf.addPage();
    yPosition = 20;
  }

  pdf.setFontSize(16);
  pdf.text('Technical Details', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  const technicalDetails = [
    `Roof Type: ${result.roofType || 'Standard'}`,
    `Orientation: ${result.orientation || 'Optimal'}`,
    `Tilt Angle: ${result.tilt || 'Standard'}Â°`,
    `Shading Analysis: ${result.shadingAnalysis || 'Minimal shading detected'}`,
    `Panel Efficiency: Standard residential solar panels`,
    `Installation Complexity: ${result.confidence > 80 ? 'Low' : result.confidence > 60 ? 'Medium' : 'High'}`
  ];

  technicalDetails.forEach(detail => {
    if (yPosition > pageHeight - 15) {
      pdf.addPage();
      yPosition = 20;
    }
    pdf.text(detail, 25, yPosition);
    yPosition += 7;
  });

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by SolarScope AI - Professional Solar Analysis', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save PDF
  pdf.save(`SolarScope-Installation-Analysis-${new Date().toISOString().split('T')[0]}.pdf`);
}

export async function generateFaultDetectionPDF(
  result: FaultResult,
  imageUrl: string,
  analysisCanvasRef: React.RefObject<HTMLCanvasElement>
): Promise<void> {
  const pdf = new jsPDF('p', 'mm', 'a4');
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Header
  pdf.setFontSize(24);
  pdf.setTextColor(220, 38, 38);
  pdf.text('SolarScope AI - Fault Detection Report', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Date
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Analysis Summary
  pdf.setFontSize(16);
  pdf.setTextColor(0, 0, 0);
  pdf.text('Fault Detection Summary', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  const faultCounts = result.faults.reduce((acc, fault) => {
    acc[fault.severity] = (acc[fault.severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const summaryItems = [
    `Total Faults Detected: ${result.faults.length}`,
    `Critical Issues: ${faultCounts.Critical || 0}`,
    `High Priority: ${faultCounts.High || 0}`,
    `Medium Priority: ${faultCounts.Medium || 0}`,
    `Low Priority: ${faultCounts.Low || 0}`,
    `Overall System Health: ${result.overallCondition || 'Analysis Complete'}`,
    `Confidence Score: ${result.confidence.toFixed(1)}%`
  ];

  summaryItems.forEach(item => {
    pdf.text(item, 25, yPosition);
    yPosition += 7;
  });

  yPosition += 10;

  // Original Image
  if (imageUrl) {
    try {
      const img = new Image();
      img.crossOrigin = 'anonymous';
      await new Promise((resolve, reject) => {
        img.onload = resolve;
        img.onerror = reject;
        img.src = imageUrl;
      });

      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      canvas.width = img.width;
      canvas.height = img.height;
      ctx?.drawImage(img, 0, 0);

      const imgData = canvas.toDataURL('image/jpeg', 0.8);
      const imgWidth = 80;
      const imgHeight = (img.height / img.width) * imgWidth;

      if (yPosition + imgHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.text('Solar Panel System Image', 20, yPosition);
      yPosition += 10;
      pdf.addImage(imgData, 'JPEG', 20, yPosition, imgWidth, imgHeight);
      yPosition += imgHeight + 15;
    } catch (error) {
      console.error('Error adding original image to PDF:', error);
    }
  }

  // Analysis Overlay
  if (analysisCanvasRef.current) {
    try {
      const overlayCanvas = await html2canvas(analysisCanvasRef.current);
      const overlayData = overlayCanvas.toDataURL('image/png');
      const overlayWidth = 80;
      const overlayHeight = (overlayCanvas.height / overlayCanvas.width) * overlayWidth;

      if (yPosition + overlayHeight > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(14);
      pdf.text('Fault Detection Analysis', 20, yPosition);
      yPosition += 10;
      pdf.addImage(overlayData, 'PNG', 20, yPosition, overlayWidth, overlayHeight);
      yPosition += overlayHeight + 15;
    } catch (error) {
      console.error('Error adding analysis overlay to PDF:', error);
    }
  }

  // Detailed Fault List
  if (result.faults.length > 0) {
    if (yPosition > pageHeight - 60) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(16);
    pdf.text('Detected Faults', 20, yPosition);
    yPosition += 10;

    result.faults.forEach((fault, index) => {
      if (yPosition > pageHeight - 30) {
        pdf.addPage();
        yPosition = 20;
      }

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'bold');
      
      // Set color based on severity
      switch (fault.severity) {
        case 'Critical':
          pdf.setTextColor(220, 38, 38);
          break;
        case 'High':
          pdf.setTextColor(245, 101, 101);
          break;
        case 'Medium':
          pdf.setTextColor(251, 146, 60);
          break;
        default:
          pdf.setTextColor(34, 197, 94);
      }

      pdf.text(`${index + 1}. ${fault.type} (${fault.severity})`, 25, yPosition);
      yPosition += 7;

      pdf.setFont('helvetica', 'normal');
      pdf.setTextColor(0, 0, 0);
      const description = pdf.splitTextToSize(fault.description, pageWidth - 50);
      pdf.text(description, 30, yPosition);
      yPosition += description.length * 7 + 8;
    });
  }

  // Recommendations
  if (result.recommendations && result.recommendations.length > 0) {
    if (yPosition > pageHeight - 60) {
      pdf.addPage();
      yPosition = 20;
    }

    pdf.setFontSize(16);
    pdf.setTextColor(0, 0, 0);
    pdf.text('Maintenance Recommendations', 20, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    result.recommendations.forEach((rec, index) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      
      const lines = pdf.splitTextToSize(`${index + 1}. ${rec}`, pageWidth - 40);
      pdf.text(lines, 25, yPosition);
      yPosition += lines.length * 7 + 5;
    });
  }

  // Technical Details
  if (yPosition > pageHeight - 60) {
    pdf.addPage();
    yPosition = 20;
  }

  pdf.setFontSize(16);
  pdf.text('Technical Analysis', 20, yPosition);
  yPosition += 10;

  pdf.setFontSize(12);
  const technicalDetails = [
    `Analysis Method: AI-powered computer vision`,
    `Image Quality: ${result.confidence > 80 ? 'Excellent' : result.confidence > 60 ? 'Good' : 'Fair'}`,
    `Detection Accuracy: ${result.confidence.toFixed(1)}%`,
    `System Status: ${faultCounts.Critical ? 'Requires Immediate Attention' : faultCounts.High ? 'Needs Maintenance' : 'Operational'}`,
    `Next Inspection: ${faultCounts.Critical ? 'Immediately' : faultCounts.High ? 'Within 30 days' : 'Within 6 months'}`
  ];

  technicalDetails.forEach(detail => {
    if (yPosition > pageHeight - 15) {
      pdf.addPage();
      yPosition = 20;
    }
    pdf.text(detail, 25, yPosition);
    yPosition += 7;
  });

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by SolarScope AI - Professional Solar Analysis', pageWidth / 2, pageHeight - 10, { align: 'center' });

  // Save PDF
  pdf.save(`SolarScope-Fault-Detection-${new Date().toISOString().split('T')[0]}.pdf`);
}